generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_DATABASE_URL")
}

model Role {
    id       Int      @id @default(autoincrement())
    pic      String
    name     String
    about    String
    cv       String
    role     String
    linkedin String?
    x        String?
    phrases  Phrase[]
    team     String[]
}

model Phrase {
    id          Int    @id @default(autoincrement())
    title       String
    description String
    roleId      Int
    Role        Role   @relation(fields: [roleId], references: [id])
}

model News {
    id               Int      @id @default(autoincrement())
    title            String
    shortDescription String
    content          String
    postDate         DateTime
    poster           String
    link             String
    slug             String
    image            String
    sponsor          Boolean?
}

// model Department {
//     id          String   @id @default(auto()) @map("_id") @db.ObjectId
//     name        String
//     description String
//     image       String
//     courses     Course[]
// }

// model Course {
//     id              String     @id @default(auto()) @map("_id") @db.ObjectId
//     title           String
//     shortDetail     String?
//     longDescription String?
//     duration        Int
//     level           String
//     slug            String
//     courseCover     String
//     departmentId    String     @db.ObjectId
//     department      Department @relation(fields: [departmentId], references: [id])
//     shiftId         String?    @db.ObjectId
//     shift           String?
//     benefits        String[]
//     years           Year[]
// }

model Year {
    id        Int        @id @default(autoincrement())
    year      Int
    courseId  Int
    course    Course     @relation(fields: [courseId], references: [id])
    semesters Semester[]
}

// model Semester {
//     id       String    @id @default(auto()) @map("_id") @db.ObjectId
//     semester Int
//     yearId   String    @db.ObjectId
//     year     Year      @relation(fields: [yearId], references: [id])
//     subjects Subject[]
// }
// model Subject {
//     id         String   @id @default(auto()) @map("_id") @db.ObjectId
//     name       String
//     workload   Int
//     semesterId String   @db.ObjectId
//     semester   Semester @relation(fields: [semesterId], references: [id])
// }

model Application {
    id        Int      @id @default(autoincrement())
    name      String
    email     String
    phone     String
    birthDate DateTime
    course    String
    interest  String
    date      DateTime
}

model Event {
    id              Int      @id @default(autoincrement())
    title           String
    description     String
    longDescription String
    date            DateTime
    category        String
    imageUrl        String
    isFeatured      Boolean
    slug            String
    place           String
}

model Department {
    id                 Int      @id @default(autoincrement())
    name               String
    catalog_link       String?
    department_cover   String?
    departmentDirector Director @relation(fields: [directorId], references: [id])
    courses            Course[]
    directorId         Int
}

model Director {
    id         Int          @id @default(autoincrement())
    name       String?
    picture    String?
    Department Department[]
}

model Course {
    id               Int          @id @default(autoincrement())
    name             String
    duration         String
    level            String
    short_detail     String
    slug             String
    long_description String
    benefits         String[]
    shift_afternoon  Boolean?
    shift_morning    Boolean?
    entryProfile     String[]
    outProfile       String[]
    shift_evening    Boolean?
    course_cover     String
    yearDetails      YearDetail[]
    departmentId     Int
    department       Department   @relation(fields: [departmentId], references: [id])
    // shiftId          Int
    // Department      Department   @relation(fields: [departmentId], references: [id])
    Year             Year[]
}

model YearDetail {
    id        Int        @id @default(autoincrement())
    year      Int
    semesters Semester[]
    courseId  Int
    Course    Course     @relation(fields: [courseId], references: [id])
}

model Semester {
    id           Int        @id @default(autoincrement())
    semester     Int
    subjects     Subject[]
    yearDetailId Int
    YearDetail   YearDetail @relation(fields: [yearDetailId], references: [id])
    Year         Year?      @relation(fields: [yearId], references: [id])
    yearId       Int?
}

model Subject {
    id         Int      @id @default(autoincrement())
    name       String
    workload   Int
    semesterId Int
    Semester   Semester @relation(fields: [semesterId], references: [id])
}
